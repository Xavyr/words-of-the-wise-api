type Quote {
  _id: String
  titan: String
  hashtags: [String]
  message: String
}

input QuoteInput {
  _id: String
  titan: String
  hashtags: [String]
  message: String
}

type Practice {
  _id: String
  titan: String
  practice: String
  description: String
  frequency: String
}
input PracticeInput {
  _id: String
  titan: String
  practice: String
  description: String
  frequency: String
}

type Paradigm {
  _id: String
  titan: String
  paradigm: String
  background: String
}
input ParadigmInput {
  _id: String
  titan: String
  paradigm: String
  background: String
}

type Inspirational {
  _id: String
  titan: String
  source: String
  story: String
}
input InspirationalInput {
  _id: String
  titan: String
  source: String
  story: String
}

type Routine {
  _id: String
  titan: String
  where: String
  what: String
  when: String
  benefits: String
}
input RoutineInput {
  _id: String
  titan: String
  where: String
  what: String
  when: String
  benefits: String
}

type Titan {
  _id: String
  name: String
  industry: String
  claimToFame: String
  source: String
  quotes: [Quote]
  practices: [Practice]
  paradigms: [Paradigm]
  inspirationals: [Inspirational]
  # routines: [Routine]
}

type Query {
  getTitans: [Titan]
  getQuotes: [Quote]
  getPractices: [Practice]
  getParadigms: [Paradigm]
  getSingleTitanById(id: String!): Titan
}

type Mutation {
  login(email: String): String
  saveTitan(
    name: String
    industry: String
    claimToFame: String
    source: String
    quotes: [QuoteInput]
    practices: [PracticeInput]
    paradigms: [ParadigmInput]
    inspirationals: [InspirationalInput]
    routines: [RoutineInput]
  ): Titan
  deleteAllTitans: Titan
  deleteAllQuotes: Quote
  deleteAllPractices: Practice
  deleteAllParadigms: Paradigm
  deleteAllInspirationals: Inspirational
}
